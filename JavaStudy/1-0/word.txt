■ IT
* IT→ Information Technology の略
* ICT→ Information and Communication Technology の略
* IoT→ Internet of things の略。スマート家電等
■ OS
* OS→ Operating System の略。iOSやandroidOS
* Windows→ マイクロソフト社が開発した  OS
* macOS (Mac OS X)→Apple社のOS
* UNIX→ケン・トンプソン、デニス・リッチーラが開発を開始した。現代的なOSの始祖であり、あらゆる後発OSがUNIXで発明・実証された設計を参考にしている。
* Linux→ 世界で最も普及している、オープンソースのオペレーティングシステム（OS）。UNIX系OSの一種で、プログラムが公開されており誰でも自由に入手や使用、改変、再配布することができる。
■ 言語・環境
* マークアップ／フロントエンド→文書を理解させるために、ルールに従ったタグを記述していくこと。HTML等で書くこと。
    * HTML→構造
    * CSS→デザイン
    * JavaScript→動き
* サーバーサイド→サーバーでプログラムの実行・管理
    * .NET（C#, VB）→.NET（ドットネット）とは、主にMicrosoft .NET Frameworkというアプリケーション、または開発環境を指す単語。WindowsのシステムやWebサービスなどの開発に利用され、Windows7以降のOSでは、デフォルトで搭載。c＃、VB はそれを扱うための言語。
    * Java→オブジェクト指向。JavaはWindowsやMacOS、Linux、UNIXなど様々なマシンで、どこでも動作することができる。
        * Java SE→Java Platform, Standard Edition の略.Javaの必要最低限をまとめたもの。
        * Java EE（Jakarta EE）→ Java Platform, Enterprise Edition の略。SE +拡張機能をつけたもの。
    * Perl→「スクリプト言語」と呼ばれる種類のプログラミング言語。文字列処理機能が優れており、プログラミング作業やエンジニアとしての作業に欠かせないテキスト操作にも強い。今はPHPに替わられている。
    * PHP→動的にWebページを生成することができるサーバーサイドのスクリプト言語。webページ作るのにいい。
    * Ruby→オブジェクト指向スクリプト言語。まつもとゆきひろ氏により開発。Ruby on RailsというWebアプリケーションフレームワークを使うことができる。
■ サーバーソフト
* Apache→Webサーバーソフトウェア。2017年4月時点で全世界の約50%のシェアを占め、最も利用されている。オープンソースソフトウェア(OSS)で、無償で誰でも利用可能。重い処理向き。
* nginx→軽い処理なら早い。
* IIS→Microsoft社のWEBサーバーソフトウェア。Microsoft Internet Information Servicesの略。
■ SQL
* SQL→SQLはデータベース言語の中で、最も普及している言語の一つ。DBMS（データベース管理システム）上でデータやデータベースを制御するための言語。
    * DB2→IBMが開発・販売するデータベース管理システムの1つ.
    * MySQL→世界でもっとも利用されている「データベース管理システム』。Linux、Mac、Windowsなどを問わず動作する。非商用利用なら無償。世界的にはこれが使われる。
        * Maria DB→「MySQL」から派生。完全なるGPLライセンス。いろいろへんこうできる。
    * Oracle DBオラクル社が開発・販売しているリレーショナル・データベース管理 
システム 。RDBMS.
    * PostgreSQL→RDBMS。MySQLと好みが分かれる。オープンソース。Windowsと相性がいい
    * SQLite→一般的なRDBMS(データベース管理システム)に比べて大規模な仕事には不向きだが、中小規模ならば速度に遜色はない。導入が簡単。
    * SQL Server→マイクロソフト社のデータベース。操作性が簡単。
* CRUD→データベース管理システム（DBRS)に必要とされる4つの基本機能である、データの作成（Create）、読み出し（Read）、更新（Update）、削除（Delete）の頭文字を繋げた語。
* トランザクション→データの一貫性を保つために、一連の処理が完了するまでデータを変更しないようにできる機能。ある口座から口座への送金時に、片方では送金を完了しているが、もう片方には届いてないということになると困るため、このときは送金する前の状態になる。
    * コミット「確定させる」や「反映させる」。変更等を確定すること。
    * ロールバック→コミットに失敗したときに前の状態に戻すこと。
* 排他制御（排他ロック）→あるプログラムがストレージ上のあるファイルに書き込みを行なっている最中に、並行して実行されている別のプログラムがそのファイルへの書き込みを開始してしまうと、ファイルの内容が破壊され整合性のないものになってしまうのを防ぐためのもの。
    * 楽観ロック→データを更新しようとするときにデータを取得した時と同じかどうかで更新しても大丈夫か判断する。ショッピングサイトで使われる。
    * 悲観ロック→ある人が使っていたら他の人は使えない。
* 実行計画→ 実行計画とは何かというと，実際に実行されるプログラムの概要を提示したもの。
* チューニング→ 性能の悪いSQLを発見し、その処理過程を改善することを指す。
* パフォーマンス→ 処理性能や実行速度、通信回線・ネットワークなどの伝送速度・容量などのことを指す。
* スロークエリ→ 時間のかかっているSQLのこと。2秒以上かかっていたら大体遅い部類。
* クエリログ→ クライアントからの MySQL Server への接続・接続解除の情報、およびクライアントから実行された全ての SQL クエリを出力してくれるログ。SQL 実行エラーが発生した際に、どのような SQL が実行されたのかを正確に把握するのに役に立つ。
* IDE（統合開発環境）→ integrated development environmentの略。テキストエディタ・コンパイラ・デバッガなどを、一つのソフトウェアにまとめたもの。統合開発環境は開発環境を効率化し、フレームワークは開発工程を効率化する。IDEはGUIが採用されているため視覚的にも分かりやすい。
    * Eclipse→ 主にJavaの開発環境として使用されていますが、C++・Ruby・PHPなどでも利用可能。IBMによって開発された。
    * NetBeans→ Oracleを中心としたコミュニティにより開発されているため、Java最新版にいち早く対応できる利点がある。
    * SpringToolSuite→ Eclipseをベースに、Spirng Framework利用のための各種プラグインを追加して作られたSpringオリジナルな開発ツール
* DBツール→ データベース管理タスクに使用できるツール、ユーティリティおよび補助ツールの総称。
    * A5:SQL Mk-2→ A5:SQL Mk-2 はデータベース開発において生産性を向上させるべく開発されたSQL開発ツール。SQLの実行・テーブルの編集・ストアドプロシージャの実行・ER図の作成 etc… などを行うことが出来る。
    * pgAdmin→ GUIによるPostgreSQLの管理ツール。
    * DBeaver→ DBeaver は「DBeaver Corp」が開発したマルチプラットフォーム対応の SQL クライアントツール．対応している DB は MySQL, PostgreSQL, SQLite, Oracle, MariaDB, Amazon Redshift など殆どの DB に対応
    * MySQL Workbench→ MySQL 用の公式の統合 GUI ツールであり、データベースの管理/設計/開発/移行など様々なことを実現することができる。日本語に対応していない。
    * Sequel Pro→ Mac用のMySQLのデータをGUI操作で管理するためのアプリケーション。
    * TeamSQL→ 2019年2月末、TeamSQLがサービス終了。正確には、DataRowという別サービス（有料サービス）にリブランディング。
■ 肩書
* PM→プロジェクトマネージャー。システム開発プロジェクトの責任者としてプロジェクトの企画から予算や工数の割り出し、人材確保など、プロジェクト遂行に必要なすべての準備及び調達を行うのがプロジェクトマネージャーの仕事。クライアントなどの社外関係全般に責任を持つ。部長
* PL→プロジェクトリーダー。開発などのプロジェクトを遂行する際の現場責任者。現場に携わる業務の責任を負う。課長。
* PG（PE）→ SEが作成した設計書に沿ってプログラミングを行う仕事のこと。システム開発における製造工程を担当する。
* SE→ プログラムの設計をする仕事。SEが主に担当するのはその中の要件定義～設計の部分。
* デザイナー→ 企業や個人などのクライアントから依頼されたWebサイトのデザインを担当。
* エンジニア→技術者
    * フロントエンド・エンジニア→フロントエンド側を担当するエンジニア。フロントエンドとは、ユーザーと直接データのやり取りを行う要素のことで、Web制作ではWebブラウザ側（クライアント側）を指す。
    * サーバーサイド・エンジニア→サーバー側のエンジニア。サーバーサイドは基幹系企業に使われることが多い
    * バックエンド・エンジニア→バックエンドはWEB系企業に使われることが多く、フロントエンドに対して使われている。
■ UI（ユーザーインターフェース）
* UI
    * CUI→Character-based User Interface。ターミナル等の文字のみで操作。
    * GUI→Graphical User Interface。マウスも使えて、一般的な操作。
■ ファイル／ディレクトリ
* ファイル→プログラムファイルとデータファイルの２種類がある。プログラムファイルとは、OS（基本ソフト）やアプリケーション（アプリ）とこれらに付随する種々のソフトウェア全般を指す。一方、データファイルとは、スマホで撮影した写真や動画、パソコンで作成したエクセルのファイルや文章など、ユーザーが自分で作成したオリジナルのファイルを指す。種類を示した拡張子という文字列が割り当てられていて、それぞれに対応したアプリケーションが存在する。
* 拡張子→それぞれのファイルの種類を区別させるためにある。
* ディレクトリ→フォルダのこと。
    * ルート・ディレクトリ→ディスクを開いて一番最初にフォルダがある場所、階層構造の一番上にある場所
    * カレント・ディレクトリ→作業しているディレクトリ。
* パス→コンピューターの世界では ディレクトリやファイルの場所は パスで表記される。そのファイルのおかれている場所は、パスによって経路が示される。道案内
    * 絶対パス→ルートディレクトリからの経路
    * 相対パス→カレントディレクトリからの経路
■ ネットワーク
* LAN→Local Area Networkの略。同じ建物の中などの限定された範囲で接続できるネットワークのこと。wifi
* WAN→Wide Area Networkの略。遠く離れた場所とつながったネットワークのこと。wifiが外れたとこ。
* クライアント→サービスを利用するコンピュータ。ウエイトレス
* サーバー→サービスを提供するコンピュータ。調理人
■ 各種プロトコル
* HTTP→「Hyper Text Transfer Protocol」の略。HTML(Hyper Text Markup Language = Webページを記述するための言語)で書かれた文書などの情報をやりとりする時に使われる通信手順(プロトコル)。
* FTP→→File Transfer Protocolの略。ファイルを送受信する通信の決まりごと。
* HTTPS→Hypertext Transfer Protocol Secureの略。SSLを利用したhttp通信。httpにセキュリティ機能を追加したもの。
* SSL→Secure Socket Layerの略。「通信内容を秘匿する暗号機能」「通信相手の真正性」「通信データが改ざんされていないか検知する機能」の3つの機能を持った通信規約（プロトコル）。
* SSH→Secure Shellの略。リモートコンピュータと通信するためのプロトコル。他のコンピュータを遠隔操作するための仕組み。
* ポート、ポート番号→ネットワークでデータを通信するための扉のようなもの。インターネットサーバ側のポート（扉：出入口）は固定の番号となっており、常に扉が開いた状態。パソコン側（クライアント）のポートはセキュリティ等のため毎回変わり、使用の都度ポート開閉が行われる。
* HTTP、FTP、SSHの各ポート番号→httpは80。ftpは「20番ポート」がデータコネクションとして利用、「21番ポート」が制御コネクションとして利用。sshは22番。
* ファイアウォール→防火壁。ポート（出入り口）を制御。LANから外部ネットワークの間で設置され、ウイルスを検知する。
* TCP→
■ IPアドレス
* IPアドレス→インターネットのの住所。
    * グローバルIPアドレス→管理されており、世界に一つ。
    * プライベートIPアドレス→別のLANであれば同じIPアドレスが使われる。
■ ドメイン
* ドメイン→IPアドレスを言い換えたもの。
* DNS→Domain Name System の略。IPアドレスとドメイン名の対応を管理。代えてくれる。また、検索したりする階層構造のサービス。
* VPN→Virtual Private Networの略。距離の離れた拠点同士のLANをつなぐこと。本社と支社同士だけでなく、支社と支社も繋ぐ。レジ等。
* ブリッジ→ネットワークにおける交通整理員。MACアドレスでデータの行き先を管理。「目的地（IPアドレス）」、「次の渡し先（MACアドレス）」
* プロキシサーバー→Proxy代理。企業の社内ネットワークなどからインターネットに接続する際に、出入り口で中継をしているサーバ。誰がどういったサイトを見ているのか、どういったところから不正なアクセスが試みられているのか、などさまざまな記録が残る。実際に利用者が使うパソコンなどの端末ではなく、プロキシ上でウィルスチェックを行うことができる。IPアドレスはProxyサーバのIPアドレスとなる。
■ 電子メール
* SMTP→ Simple Mail Transfer Protocolの略。メールを送信するための通信プロトコルの一つ。手紙を例にすると、ポストに投函され、郵便局で宛先別に振り分けられ、相手の最寄りの郵便局へ届けられる。ここまでの過程がメールにおけるSMTPの役割になる。つまり、SMTPはメールを相手のメールサーバーまで届ける仕組みといえる。
* POP→ Post Office Protocolの略。メールを受信するための通信プロトコル。自分の使っている郵便局(メールサーバ)に届いたメールをコピーして持ってくる。
* IMAP→ Internet Message Access Protocolの略。郵便受けに届いた手紙を郵便受けの前で読んで、読み終わったら郵便受けの中に戻すイメージ。
■ セッションとクッキー
* セッション→ コンピュータネットワークでは、接続を確立してから切断するまでの一連の通信のこと。
* クッキー→ ホームページを訪問したユーザーの情報を一時的の保存する仕組み、またはそのデータ。ログイン状態の維持。
* キャッシュ→ 閲覧したWebページの情報を一時的に保存する機能です。キャッシュデータを保存しておくと、2回目に同じWebページに訪問したときに表示するスピードが上がり、より閲覧しやすくなる。
■ DB（データベース）について
* インデックス→ データ件数が多いテーブルの検索を早くすることができる。
■ テストについて
* フロー→コーディングが終わった後にテストをする。単体テスト→結合テスト→システムテストの流れで行われる。
■ チケット管理ツール
* タスク→ 実施するべき作業や課題を「チケット」として管理する方法。発生日や作業内容、優先度、担当者や期日を登録して管理。プロジェクト管理ではチケットの発行・処理枚数により、プロジェクト全体の状況を把握する手段として活用。
■ バージョン管理
* Git→ 分散型バージョン管理システムの一つ。ローカルリポジトリも用いてる。
* SVN→ 「Apache Subversion」の略。集中型バージョン管理システムの一つ。リモートリポジトリ一つで管理。
* デグレ→ degradeの略。低下する、落ちる。システム開発におけるプログラム修正やインフラ設定の変更等により、それまで正常に動作していた機能が動かなくなるという、品質低下のトラブル事象を指す。
* マージツール→ チームで開発をするときにマージされた差分の抽出と統合を実行するツール。主にAraxis Mergeが使われる。
