■ 開発
* ウォーターフォール開発→要件定義を最初だけで念入りに行い、納品までの工程等の計画を立てる。銀行のATM開発など、障害の発生が許されないケースがある。そのような場合には、リリースの早さよりも、テストを数多く重ねて確実性を求めるウォーターフォール型開発が好まれる。
* アジャイル開発→アジャイルは「素早い」「機敏」。開発中で仕様の変更や新しい機能が追加される可能性の高いプロジェクトに向く。
* マイグレーション→migrationとは移行、移転、移住、移動、乗換などの意味を持つ英単語。ITの分野では、既存のコンピュータシステムを構成する機器やオペレーティングシステム（OS）、アプリケーションソフトなど（のいずれかあるいはすべて）を、新しく用意した別の製品に入れ替えることをマイグレーションという。
* デグレーション→degradation。プログラムにおいて、直したはずのバグ（プログラムのおかしいところ）が復活していたり、前はなかったはずのバグがあったり、実装したはずの機能がなくなっている状態のこと。
* デプロイ→deploy「配備する」、「展開する」。作ったプログラムをしかるべき場所に置いたり、あれやこれやの設定をしたりして、使える状態にすること。
* 環境
    * 開発環境（ローカル）→ローカル開発環境とは実際のサーバーにアップする前に、サイトの動作や表示確認を手持ちのパソコン内で行うことを意味する。「開発する環境（自分のPC）」と、「公開する環境（サーバー）」のOSを揃えること。
    * 検証環境（ステージング）→開発環境での動作確認の次の段階が検証環境（テスト環境）。開発し終わってリリース予定の機能がちゃんと動くかテストするための環境。開発環境と分けるのは、テスト担当者と開発担当者で分けることにより、並行して進められるから。
    * 本番環境→本番とほぼ同一の状態を擬似的に再現する事が意図されている。
* 設計書／仕様書→仕様書が『何を作るのか』を説明した資料。設計書が『どうやって作るのか』を説明した資料。要件定義や基本設計で、お客さまと一緒になって作り上げるのが仕様書。詳細設計で作るのが設計書。
    * 要件定義→お客様の要求定義をいかにシステム化していくかを定義する。要件定義では、利用者がそのシステムで何がしたいのかを元に、それを実現するために実装しなければならない機能や、達成しなければならない性能などを開発者が検討して明確にしていく。一般的にこの段階では「何が」必要なのかを定義するに留め、それを「どのように」実現するかは後の工程で検討される。
    * 基本設計書→要件定義にもとづいて、ソフトウェアの動きを外から見た際にどういう動きをするのか？(What)を決めたもの。
    * 詳細設計書→基本設計で決められた動きをどうやって実現するか？(How)を決めたもの。
* テスト
    * 単体テスト（UT）→（Unit Test）。プログラムを構成する小さな単位（ユニット）で機能を検証するテスト。具体的には。プログラムの関数やメソッド等が単体テストの単位（ユニット）となる。
    * 結合テスト（CT／IT）→CT：Combined Test/IT:Integration Test。複数の「関数」「モジュール」を組み合わせて、正常に動作するかテストする。
    * 総合テスト（ST）（System Test）。実際の運用形態に沿ってテストする。本番同様の環境を準備して実施。
* エビデンス／証跡→プログラムやシステムの試験の結果や、動作検証を確認したことを証拠として残すために作成する。または、システムトラブルやシステムバグが発生した際にも、システムの状況を事実として記録するために作成する。
* データパッチ→patch。あて布、つぎあて、ばんそうこう など。パッチとは、プログラムの一部を修正したときやバグを修正したときなどに、その対象のプログラムが使われているファイルを書き換えるためのプログラムのことを意味する。
* Access→Microsoftが提供するデータベース管理ソフト。データを表（テーブル）として管理する「リレーショナルデータベース」方式のひとつ。エクセルより大きなデータを扱うときに使うイメージ。
* マクロ
    * VBA→Visual Basic for Applicationsの略。Microsoft Officeに含まれるアプリケーションソフトの拡張機能で、利用者が簡易なプログラムを記述して実行することで複雑な処理の自動化などを行なうことができるもの。また、そのために用意されたプログラミング言語。エクセル等の繰り返し行う処理を一つのボタンで実行させるといったようなもの。
* GAS（Google Apps Script）→Googleが提供しているJavaScriptをベースにしたプログラミング環境。Googleが提供しているサービスを自由に連携することができる。例えば、海外からの「Gメール」が来たら「Google翻訳」で日本語に自動変換して「Googleドライブ」に内容を保存することも可能。
* API→Application Programming Interfaceの略。インターフェイスとは、コンピュータ用語でいうと、「何か」と「何か」をつなぐものという意味を持つ。APIとは、この「何か」と「何か」が「アプリケーション、ソフトウェア」と「プラグラム」をつなぐもの、という意味。ソフトウェアやアプリケーションなどの一部を外部に向けて公開することにより、第三者が開発したソフトウェアと機能を共有できるようにしてくれるもの。ソフトウェアにAPIという外部とやりとりする窓口を作り、外部アプリとコミュニケーションや連携ができる状態にする、ということ。
    * WEB API→HTTP／HTTPSベースで実現するAPI。開発言語が違っても連携さでられる。
    * REST API→REpresentational State Transferの略。Webシステムを外部から利用するためのプログラムの呼び出し規約(API)の種類の一つで、RESTと呼ばれる設計原則に従って策定されたもの。RESTでは不特定多数を対象にした、入力パラメータが少ない情報配信や検索サービス等での利用に向いている。
    * SOAP→Simple Object Access Protocolの略。SOAPでは複雑な入力を必要としたり、入出力に対してチェックを必要とするようなサービス等での利用に向いている。
* Ajax→Asynchronous JavaScript + XMLの略。JavaScriptとXMLを使って非同期にサーバとの間の通信を行うこと。地図マップで使われる。
    同期通信の場合
    webブラウザからサーバーにリクエストを通信し、レスポンスが戻ってくる。この時に、すべての情報を通信しているので、一瞬画面が白くなる。=>サーバーからレスポンスが返ってくるまでは他の作業はできない。
    非同期通信の場合
    webプラウザから一部の情報をリクエストするので、それ以外の部分は変わらない。なので画面が白くなることがない。=>サーバーからレスポンスが返ってこなくても他の作業ができる。
    * XML→「Extensible Markup Language」の略。「拡張可能なマークアップ言語」.文章の見た目や構造を記述するためのマークアップ言語の一種。HTMLはWebページを記述するための表示用言語。XMLは、データ記述用の言語です。XMLを使って文章中のデータの要素名や属性を定義することで、マシン側にデータの重要度（大小関係など）を認識させられる。
    * JSON→はJavaScript Object Notationの略。XMLなどと同様のテキストベースのデータフォーマット。XMLと比べると簡潔に構造化されたデータを記述することができるため、記述が容易で人間が理解しやすいデータフォーマット。
    * ステータスコード→HTMLを表示する前にブラウザが受信する3桁の番号。番号は100-510までの間で割り振られていて、各数値にはそれぞれ意味が付与されている。
    * クロスオリジン（Cross-Origin）／CORS（Cross-Origin Resource Sharing）→ 異なるドメイン(クロスオリジン)にアクセスしたときの規制ルールのこと。アクセスされるサーバーを守るため。アクセスしていいクライアントを設定することで悪意のあるアクセスを規制する。
* バリデーション→validation 。検証、実証、認可、妥当性確認などの意味を持つ英単語。入力されたデータが、あるいはプログラミング言語やマークアップ言語の記述が、規定された文法に即して、または要求された仕様にそって、適切に記述されているかどうかを検証することである。
* データ連携→データ連携とは、アプリケーションやシステム、格納先がそれぞれ異なるデータを、垣根を超えて共有・活用すること、またはそのための技術・プロセスのこと。データ連携をする際には通常、データの形式を統一する必要がある。クラウドやビッグデータの利用が当たり前になった今、どのようにデータ連携を実現させ、集まったデータを有効活用させれば良いかが大きな課題。
    * Daemon→コンピューターのメモリに常駐し、サーバーのプログラムやシステムの要求に応じて自動的にサービスを提供するバックグランドシステム。例えば、電子メールで、偶に MAILER-DAEMON から英文メールが届く事があるかと思います。これが電子メールサーバのDAEMONです。相手のサーバが故障している、宛先が間違っている等の理由で、送信出来なかった場合にメール送信者へ自動返信する働きをします。
    * CRON→、多くのUNIX系OSで標準的に利用される常駐プログラム（デーモン）の一種で、利用者の設定したスケジュールに従って指定されたプログラムを定期的に起動してくれるもの。
    * バッチ→「Batch」が語源であり、日本語では「一束、一群、一団」といった意味。バッチ処理とは“一定量の(あるいは一定期間の)データを集め、一括処理するための処理方法”
    * ログ→ログとは、起こった出来事についての情報などを一定の形式で時系列に記録・蓄積したデータのこと。船の航海記録（日誌）が原義。稼働状況の確認や集計、不具合の原因調査などのためによく参照される。
    * CSV→拡張子『.csv」のCSVファイルは互換性が高く、Excelのみならずメモ帳、メールソフト、データベースソフトなどほとんどのソフトに取り込んで閲覧、編集することが可能です。そのため、Excelファイルを扱えるかが不明な相手とデータのやり取りを行う際はCSVに変換される場合が多い。
    * TSV→Tab Separated Valueの略称。TSV形式とCSV形式は非常によく似たファイル形式タブでテキストとテキストを区切る。一方でCSVファイルの場合はカンマ「,」でテキストを区切る。
* プルリクエスト（マージリクエスト）→プルリクエストとは、コードの変更をレビュワーに通知し、マージを依頼する機能です。コードのレビューを受けることで、1人で作ると気がつかないコードの指摘やバグや記述ミスの発見ができ、コードの品質を高める。他の人に見てもらうこと。
■ チケット管理ツール
* asana→タスク整理に特化したプロジェクト管理ツールです。大きな特徴として、Asanaは、Slack/Dropbox/Googlecalendarなどのさまざまなアプリケーションとの連携が可能です。現在使用しているアプリケーションとの連携がスムーズに行えるため、比較的容易に導入することができる。
* Backlog→クラウド型のアプリケーションで、タスク管理機能に特化したプロジェクト管理ツール。ガントチャートやマイルストーンが簡単に作れるため、Web作成などでは力を発揮する。登録してから1か月間は無料。そのあと、ストレージの大きさやプロジェクト数によって、月額有料制。
* Jooto→クラウド型の管理ツール。看板方式で見やすいという点や、ドラッグ＆ドロップ方式による直感的な操作が可能なため、視覚的にすぐに使いこなすことが出来る。すべてのOSやブラウザに対応しているため、スマートフォンやタブレットでも自由に使うことができる。
* Readmine→世界的に非常に認知度の高いプロジェクト管理ツールとして知られており、自由度も高いクラウド型の管理ツール。ブラウザで登録することで、ガントチャートやロードマップが簡単に作れるうえに、管理者権限を利用したWikiの作成なども行えるため、新しく製品を作る場合などで力を発揮する。無料で全ての機能を利用することが出来る。エンジニア向けの管理ツールであり、視覚情報だけでは管理が難しい。。また、対応言語も英語に偏っているため、慣れるまでは時間がかかる
* Trello→タスクのカードを自由に動かしながら視覚的にプロジェクトを管理できるアプリケーション。付箋のように貼ったりはがしたりできるため、感覚的に使いやすい。クラウド型で、ToDoリストによるタスク管理や、画像や動画、資料といった情報の共有もスムーズ。複数人の作業をリアルタイムで確認出来るため、リモートワークなどでも力を発揮する。完全に無料であり、全ての機能が利用できる。
■ バージョン管理→
* 集中型→「ひとつのリポジトリに接続してみんなで使う」タイプ。CVS・Subversionなど
* 分散型→Gitが分散型で、Gitでは、ファイルの状態を好きなときに更新履歴として保存しておくことができます。そのため、一度編集したファイルを過去の状態に戻したり、編集箇所の差分を表示したりすることができる。分散型は「各自、個人のパソコン上にリポジトリを持ち、好きなタイミングで好きなリポジトリに同期する』。
* Github→GitHubは、Gitをより使いやすくすることを目的に、2008年に開発された。クラウド上でGitの「リモートリポジトリ」を提供することにより、遠く離れた開発者同士でも、GitHubを介して効率よく開発を進められる。
* Backlog→プロジェクト計画をガントチャートで可視化する。開発・デザイン・マーケティング・セールスなど各担当者の作業や完了期限を明確にする。
* SourceTree→Gitを簡単に使えるようにしたツールでGitの理解も簡単にできる。GUI形式でGitを使えるツール
        * Tortoise SVN→Subversion のクライアントで、Windowsのシェルエクステンションとして機能する。専用のGUIを備えており、CUI の Subversion より、直感的で簡単に扱うことが出来る。
* Git Flow→複数人による長期の開発をおこなう場合、運用ルールを決めずにGitを採用してしまうと、コンフリクトが頻繁に起こったりマージのミスが発生したりと、大変。Git flowでは、それぞれ役割が振られているmaster, release, develop, feature, hot-fixの5つのブランチを使い分けて、開発を進めてく。
    * master→リリースしたデータを置いておくブランチ。最後はここに集約する。
    * release→リリース前に準備、微調整をおこなうブランチ
    * develop→開発をおこなうためのブランチ
        * feature→開発をおこなうためのブランチで、個々の機能の実装やバグの解決をおこなう
■ FW／ライブラリ
* FW→ フレームワークごとに、アプリの開発を支援するWebアプリケーションフレームワーク、機能性や操作性の向上を目的としたユーティリティ系フレームワーク、という2つの区分に分かれ、搭載されている機能も様々。目的のアプリケーション等をゼロから開発する必要がないので、開発工程を大幅に短縮できることにある。
    * Spring Framework→Javaの開発環境で使用できるオープンソースのフレームワーク。特徴として、AOPとDIと呼ばれる概念で構築されていること、専用のテストプログラムがあることなど。
        * AOPとは「Aspect Orientation Programming」の略で、日本語では「アスペクト指向プログラミング」と訳される。システム内で行われる同じ処理（共通処理）を抽出して集約をするプログラミング手法で、プログラムをシンプルにまとめることができる。コードを短くわかりやすくすることで、不具合の特定が容易になるほか、プログラムの修正も行いやすくなる。
        * DIとは「Dependency Injection」の略で、日本語では「依存性の注入」と訳される。。例えば、2つのクラスが存在していて、両方のクラスが依存関係にある場合、一方が未完成だと動作のテストを行うことができない。しかし、Spring Frameworkを使用して、オブジェクトを注入することにより、クラスの依存関係が解消されて、動作のテストを行えるようになる。結果として、1つひとつのプログラムを独立させやすくなり、システムの開発や改修が楽になる。
        * ひとつひとつのシステムを統合した際のバグ検出ができる専用テストプログラムがある。
    * Struts→正式名称は「Apache Struts」。英語の「strut」の複数形で「支柱」「方杖」「誇示」などの意味がある。、Javaを用いてWebアプリケーションフレームワークの1つ。脆弱性が指摘され、Springにながれてる。
    * JSF（Java Server Faces）→JavaのWebアプリケーションを作るためのフレームワークの一つ。JSFを簡単に説明すると、たとえばWebのアンケート欄でよく見かける機能が作れるもの。扱いが簡単。ツール化していてセットのために新しい言語を覚える必要もなく、普段使い慣れた言語から離れることもない。
* ライブラリ→オブジェクトコード（機械語などで記述されたプログラム）が格納されているが、それ単体で起動して実行することはできず、他の実行可能ファイルに連結されて利用される。ソースコードの集合をライブラリという場合もある。
    * Bootstrap→実体としてはいくつかのCSSファイルとJavaScriptファイル。オープンソースで開発され、無償。ブラウザでの表示調整用のフレームワーク。「CSSフレームワーク」や「CSSライブラリ」と呼ばれる。一般的に分かりやすい表示になるように既に検討済みの設定が、自分で CSSのコードを書く事無しに利用できる。
    * Flyway→オープンソースのデータベースマイグレーションツール。データベースの状態をバージョン管理できるようになる。
    * Jackson→Javaで使えるJSONライブラリ。JSON形式の文字列をJavaのオブジェクトに直接マッピングしたり、
逆にJavaオブジェクトをJSON文字列に変換できたりする。
    * jQuery→JavaScriptでできることを、より簡単な記法で実現できように設計されたJavaScriptライブラリ
    * Junit→Javaプログラムの単体テストを行うためのツール
    * Log4j→オープンソースのJavaプログラム用ロギングユーティリティ（API）。ロギングユーティリティとして、ログ出力スピードのパフォーマンスに対して、特段に配慮された設計になっていて、ログ出力スピードは、かなりの速度を誇る。信頼性と柔軟性があるロギングユーティリティとして、世界中で広く利用されている。
    * Lombok→ Java言語におけるボイラープレートコードをソースコードから排除するために使用するライブラリである。ボイラープレートコードとは、言語仕様上省く事ができない定型的なコードの事である。 ボイラープレートコードは本質的なロジックでないため、アプリケーションを実装する上で冗長なコードとなる。
        * Java言語における代表的なボイラープレートコードには、
            * メンバー変数にアクセスするための getter / setter メソッド
            * equals/hashCodeメソッド
            * toStringメソッド
            * コンストラクタ
            * リソース(入出力ストリーム等)のクローズ処理
            * ロガーインスタンスの生成
		等がある。
    * ORM→オブジェクト関係マッピング（英: Object-relational mapping、O/RM、ORM）。データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法である。オブジェクト指向言語から使える「仮想」オブジェクトデータベースを構築する手法である。SQLを使わない方法。
■ 連絡ツール
* ChatWork→日本企業が開発した純国産のビジネスチャットツール。国産なので使いやすく見やすい
	・自分専用のマイチャットはメモなどに最適
	・期日と担当者を指定できるタスク管理
	・メッセージを送ってからも編集、削除が可能
	・高いセキュリティで安全な情報管理
* Slack→使いやすいシンプルなデザイン
	・チーム別、プロジェクト別、顧客別などのチャンネルごとの会話が可能
	・音声通話、ビデオ通話、画面共有も可能
	・ドラッグ＆ドロップでファイル共有
	・高いセキュリティ性
* IP Messenger→プロトコルにTCP/IPを利用するメッセンジャーソフト。IPアドレスを直接指定することで、インターネット上のユーザーとメッセージの送受信をすることも可能。
■ Java
* Javadoc→Javaでは、「Javadoc」と言われるコメントを記述できる。プログラムについて説明するドキュメントをソースコードに埋め込むためのもの。クラスの概要やメソッドの概要を記述しておくと、その情報からHTML形式のドキュメントファイルを生成してくれる。Javadocはソースコードから、
        * ソースコードの構造から機械的に読み取れるもの
        * 特定の書式で書かれたコメント
	の2つを自動で抽出してまとめたドキュメント
	『option』+『command』+『J』がショートカットキー。
* アノテーション→『注記』、「注釈」（本文の語句や文章をとりあげてその意味を解説すること。また、その解説したもの。）という意味。書いておく。
    * １、コードを書く場所にルールを書き、ミスをなくす
    * ２、コンパイラの警告メッセージを出なくする。
    * ３、プログラムを実行する環境に合わせて、動作を変える 等のためのもの。
* メモリ管理→メモリはOSが管理している。そのためプログラムの中でメモリが必要になっても、勝手に使うことはできない。OSから借りる必要がある。OSは貸し出し依頼を受けたら、空いているメモリを探してプログラムに貸し出してくれる。
    * ヒープ→OSやアプリケーションソフトが使用するメモリ領域の一種。アプリケーションソフトはこの値を元にして確保したヒープ領域を使用する。ヒープメモリはアプリケーション側での自由度が高い反面，ガベージコレクション機能がないプログラミング言語(の処理系)では，確保したヒープをすべて手作業で解放しなければならないため，誤解放や解放漏れなどのミスが起こりやすい。
    * GC→Java のプログラムでは、使用済みメモリを明示的に削 除する必要がない。不要になったメモリは、Java VM によって自動的に回収されるため。 業務処理が進むと、使用済み の領域と使用中の領域が混在し、使用できるメモリ領域が 減ってく。Java VM は、使用できるメモリ領域が少 ないことを検知すると、ガーベージコレクションを実行しガーベージコレクションでは、使われなくなった領域 を回収して、空き領域を作る処理が行われます。これにより、大きな空き領域が作られる。
* GoF→Gang of Four。、書籍『オブジェクト指向における再利用のためのデザインパターン』(原題:Design Patterns: Elements of Reusable Object-Oriented Software) の著者である、エーリヒ・ガンマ、リチャード・ヘルム、ラルフ・ジョンソン、ジョン・ブリシディースの4人を指す。GoFによるデザインパターン（GoFパターン）は、多数のソフトウェアパターンの中で最も広く知られているものである。
* デザインパターン→「オブジェクト指向において、よく使われる設計をパターン化したもの」。これを適用させると、プログラムが再利用しやすく、かつ読みやすいものとなる。
■ その他
* オブジェクト指向→変数と関数をひとまとめにしたクラスを作るプログラミングの手法。ゲーム開発でキャラクターを１万人作るのは大変だが、その全員が共通の動きや能力があるのなら、そのベースとなるクラスを作っておき、各キャラクター別の能力をつけたければ、ベースのクラスを継承したりメソッドを呼びだして追加する。
* バッチ処理→バッチ処理とは“一定量の(あるいは一定期間の)データを集め、一括処理するための処理方法”
* コンパイル→プログラミング言語で書かれた文字列（ソースコード）を、コンピュータ上で実行可能な形式（オブジェクトコード）に変換すること。コンピュータ上で実行される命令は機械語で、人間には意味をとらえにくい数字の並びであるため、機械語でプログラムを作成するのは困難。このため、人間の言葉の表現により近いプログラミング言語（高水準言語）でプログラムを記述し、その後、コンパイルにより機械語に変換する方法が考えられた。
* カバレッジ→coverage。取材範囲、補償範囲、受信範囲、対象範囲、被覆率などの意味を持つ英単語。ソフトウェア開発において、出来上がったプログラムのテストをする際に、どの程度をテスト対象とする（ことができる）かをカバレッジ（テストカバレッジ）という。
* プラットホーム→特定のアプリケーションから見て、そのアプリケーションが動作するのに必要な環境の事を指す。スマホやpc等。また、アマゾンやインスタ等も指す。
